#include<iostream>
using namespace std;
struct TBTnode
{
   int data;
   int lbit, rbit;
   TBTnode *left, *right;
};
class Tree
{
public:
   int n = 0;
   TBTnode* in[20];
   TBTnode* create();
   TBTnode *insert(TBTnode *T, int x);
   void Inorder(TBTnode *T);
   void inorderseq(TBTnode *T);
   void Threding(TBTnode *T);
};
TBTnode* Tree::insert(TBTnode *T, int x)
{
   TBTnode *p, *q, *r;
   r = new TBTnode;
   r->data = x;
   r->left = NULL;
   r->right = NULL;
   if (T == NULL)
      return r;
   p = T;
   while (p != NULL)
   {
    q = p;
    if (x > p->data)
      p = p->right;
    else
      p = p->left;
   }
   if (x > q->data)
      q->right = r;
   else
      q->left = r;
   return T;
}
TBTnode *Tree::create()
{
  int n, x, i;
  TBTnode *root;
  root = NULL;
  cout << "Enter number of nodes: ";
  cin >> n;
  cout << "Enter tree values: " << endl;
  for (i = 0; i < n; i++)
  {
    cin >> x;
    root = insert(root, x);
  }
  return root;
}
void Tree::Inorder(TBTnode *T)
{
 if (T != NULL)
 {
   Inorder(T->left);
   cout << T->data << " ";
   Inorder(T->right);
 }
}
void Tree::inorderseq(TBTnode *T)
{
 if (T != NULL)
 {
  inorderseq(T->left);
  in[n++] = T;
  if (T->left == NULL)
     T->lbit = 0;
  else
     T->lbit = 1;
  if (T->right == NULL)
     T->rbit = 0;
  else
     T->rbit = 1;
  inorderseq(T->right);
 }
}
void Tree::Threding(TBTnode *T)
{
 int i;
 TBTnode *root, *q;
 root = new TBTnode;
 root->data = 0;
 root->lbit = root->rbit = 1;
 root->left = T;
 root->right = root;
 q = in[0];
 q->left = root;
 cout << "\nThread to left of " << q->data << " is " << q->left->data << endl;
 if (q->rbit == 0)
 {
   q->right = in[1];
   cout << "Thread to right of " << q->data << " is " << q->right->data << endl;
 }
 q = in[n - 1];
 if (q->lbit == 0)
 {
   q->left = in[n - 2];
   cout << "Thread to left of " << q->data << " is " << q->left->data << endl;
 }
 q->right = root;
 cout << "Thread to right of " << q->data << " is " << q->right->data << endl;
 for (i = 1; i < (n - 1); i++)
 {
   q = in[i];
   if (q->lbit == 0)
   {
      q->left = in[i - 1];
      cout << "Thread to left of " << q->data << " is " << q->left->data << endl;
   }
   if (q->rbit == 0)
   {
      q->right = in[i + 1];
      cout << "Thread to right of " << q->data << " is " << q->right->data << endl;
   }
 }
}

int main()
{
  Tree s;
  TBTnode *h;
  h = s.create();
  cout << "INORDER IS:" << endl;
  s.Inorder(h);
  s.inorderseq(h);
  s.Threding(h);
  return 0;
}

